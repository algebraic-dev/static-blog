{"pageProps":{"title":"How I improved my coding skills","desc":"I'm trying to improve my writing skills with this post that introduces some cool stuff from the Haskell programming language!","date":"Thu Apr 14 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","source":{"compiledSource":"var u=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(e,t,a)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&l(e,a,t[a]);if(i)for(var a of i(t))r.call(t,a)&&l(e,a,t[a]);return e},h=(e,t)=>m(e,c(t));var p=(e,t)=>{var a={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&i)for(var n of i(e))t.indexOf(n)<0&&r.call(e,n)&&(a[n]=e[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,t=p(n,[\"components\"]);return mdx(MDXLayout,h(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Learning a new language is something that takes a lot of time but it can really help you with thinking\nabout the problems that other technologies solve and how to improve your own code with another style.\nThis article will focus on the programming language called Haskell but there are a lot of programming\nlanguages that can improve your code abilities and your sense of bad code.`),mdx(\"p\",null,`I started learning functional programming in the beginning of 2019 using Elixir and ReasonML but when\nI started to learn the Haskell programming language I had a cool but hard time trying to understand and\nlearning it's purpose (because it looks really hard and not focus on the mainstream things like Web Dev) and,\nbecause of a lot of frustration, in the end I had to read this incredible but large book called \"Haskell from\nfirst principles\" to understand how beautiful is Haskell.`),mdx(\"h1\",null,\"What is Haskell?\"),mdx(\"p\",null,`Haskell is a programming language that is lazy evaluated, functional, so it relies on composing and applying\nfunctions instead of using classes and objects as in object oriented paradigm, and pure so all\nthe functions in Haskell returns the same output if you put the same value.`),mdx(\"p\",null,`If you think about the term \"pure\" for a while, you will realize that we probably\ncannot read files, get HTTP requests or even print to the screen because these\nfunctions can return different values for the same input. Haskell solves it in a abstract\nand odd way by internally creating a new world (as a unique symbol) that will represent the change of the real\nworld in each operation inside the IO monad, so to see the program outputting two different values at the same\ninput inside the IO monad, you will have to create a time machine!`),mdx(\"h1\",null,\"The Hello World\"),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/KRiRvST.png\",alt:\"Hello world\"}))),mdx(\"p\",null,`Looks simple right? As a typed programming language we have to specify the type of the expression using \"::\" and the\nvalue of the expression is specified after the equal sign. In this simple example, we define that main is a value of\ntype IO () where the empty parenthesis is the same as a type with one single value, so it's just a placeholder value\nthat means that it not contains anything useful at all. The IO that is before the empty parenthesis is the IO monad that\nI mentioned in the last paragraph so it specifies that the function will 'create' side effects. The putStrLn function\nwill simply print the String to the screen returning an IO effect.`),mdx(\"h1\",null,\"Pure and impure functions\"),mdx(\"p\",null,`Sometimes you just have to be obvious in what your function/method does, people don't want to get some error related to the network connection when\nthey're simply comparing if two URLs are equal in a function call like the one below. `),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-java\"}),`url1.equals(url2)\n`)),mdx(\"p\",null,`It's actually something that happens in the Log4j library for Java. When you use a HashMap data structure, it resolves host names to the same\nIP to compare them so it does something more than just putting inside a HashMap data structure it actually makes a network call.`),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/Gppm9rw.png\",alt:\"Two functions to print\"}))),mdx(\"p\",null,\"In Haskell we cannot make something like that without specifying something like IO, the first function will make a pure sum of two numbers\"),mdx(\"p\",null,`In this piece of code, we specify that addPrint will generate a side effect so it returns an IO Int that is different from a simple Int, and\nIO Int not allow us to get out of the IO anymore. We can extract the Int from the IO but in the end we will have to create another IO with\nanother value that will or not use this value from before. In the line at the end of this code, the function wraps (a+b) inside the IO Monad\nusing pure. So if I use addPrint in a 'pure' function, it will contaminate this function with IO and the others that use it too. `),mdx(\"p\",null,`This \"contamination\" is really useful when we have to separate code that should be deterministic from the ones that can fail and with it we\nguarantee (although having unsafePerformIO) that it will behave as we want.`),mdx(\"h1\",null,\"A simple RPG in Haskell\"),mdx(\"p\",null,`In Haskell we can easily create new types and they're really useful to describe every aspect of our code. If we want to describe\nan RPG with things like classes, items and players we can describe them in this way:`),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/wstUnpN.png\",alt:\"RPG Data types\"}))),mdx(\"p\",null,`So now we have something a little more complex, ItemKind is a type that the constructors are Staff or Sword just like an enum from Java or C.\nItem is like a record or a struct and User is these two concepts together with. In the end we can have a new User called \"Ainz Ooal Gown\" that\nis a Mage (constructor of the type User) with an Item that is a Staff.`),mdx(\"p\",null,`Obviously we can make it a little more \"complex\" using some other concepts that are a little more complex using some cool Haskell\nextensions (KindSignatures and DataKinds) like:`),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/wstUnpN.png\",alt:\"RPG Data types\"}))),mdx(\"p\",null,\"So now, the Item carries the Kind (the type of a type) of the item and we will get an error in the last line that a Mage should use a Staff and not a Sword.\"),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/hZ89bUD.png\",alt:\"Error message\"}))),mdx(\"p\",null,\"And after removing this user called Ainz, we can join it with some code that interacts with the real world like this:\"),mdx(\"p\",null,mdx(\"img\",o({parentName:\"p\"},{src:\"https://i.imgur.com/bfwUwdC.png\",alt:\"Impure\"}))),mdx(\"p\",null,`Superficially, we create two items (An Item Staff called staff and an Item Sword called sword) and a cool function called attack that will\npattern match on the User to check if it's a Swordsman or a Mage (like destructuring in Javascript) and then print a cool and type safe phrase.`),mdx(\"h1\",null,\"Besides that, why should I learn these odd technologies?\"),mdx(\"p\",null,`The recent 3.10 version of Python introduced \"structural matching\" that is exactly the same thing as the pattern matching that Haskell has and it's\nmentioned in Simon Peyton Jones book \"The implementation of functional programming languages\" published in 1987. From that, we can see that some\ncool features are slowly becoming more popular like with pattern matching, the immutability by default from Rust and even cool libraries like\nArrow KT for Kotlin are getting a great leverage. There are a lot of old and odd programming languages features that slowly got implemented on\nmainstream languages or just turned into mainstream languages because they matter. `),mdx(\"h1\",null,\"Conclusion\"),mdx(\"p\",null,`It's just an introduction to a cool language and why you should learn about them. No matter what language you learn, you always will have to learn\nsome other ways to deal with problems (because programming language designers want to be authentic). If you want to learn more about Haskell I\nrecommend:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Haskell Programming from First Principles\"),mdx(\"li\",{parentName:\"ul\"},\"Learn You a Haskell for Great Good!\")),mdx(\"p\",null,'There are a lot of other sources like the \"Haskell for imperative programmers\" playlist in YouTube.'))}MDXContent.isMDXComponent=!0;\n","scope":{}},"name":"2022-04-14-how-i-improved-my-coding-skills","id":1},"__N_SSG":true}