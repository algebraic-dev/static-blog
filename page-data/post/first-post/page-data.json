{"componentChunkName":"component---src-templates-post-tsx","path":"/post/first-post","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pensando a Linguagem - MKE1\",\n  \"desc\": \"Desc\",\n  \"date\": \"2022-01-08T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recentemente vim tendo varios problemas relacionados a linguagens de programa\\xE7\\xE3o e por isso, para expressar\\nminha indigna\\xE7\\xE3o (ou talvez s\\xF3 minha falta de habilidade com essas linguagens), eu decidi fazer alguns posts.\\nEsse post \\xE9 totalmente dedicado a meus problemas com PHP, JS e Haskell al\\xE9m de tentativas falhas de ter usado\\nalgumas outras linguagens estilo Unison que me fizeram refletir sobre como software grandes poderiam ser projetados\\npara serem mais faceis de serem compreendidos e mais faceis de arrumar sem quebrar partes. Al\\xE9m de falar mal de linguagens\\ne meus problemas com elas, eu irei fazer um \\\"devlog\\\" de como fazer uma linguagem de programa\\xE7\\xE3o na linguagem Idris do 0.\"), mdx(\"h1\", null, \"Coisas que a linguagem \", mdx(\"strong\", {\n    parentName: \"h1\"\n  }, \"N\\xC3O\"), \" vai ter:\"), mdx(\"p\", null, \"Come\\xE7ando de maneira bem granular, vou citar alguns pontos que eu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ODEIO\"), \" pelo simples motivo\\ndesses pontos servirem de funda\\xE7\\xE3o e guia para todas as coisas que vamos ter na linguagem. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Vari\\xE1veis globais:\"), \" Essa importante feature para software moderno, que sem isso n\\xE3o teriamos a absurda\\nperformance e facilidade, faz com que haja problemas com a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MINHA\"), \" leitura do c\\xF3digo. Nunca sei em\\ntempo de compila\\xE7\\xE3o qual \\xE9 o valor e se aquilo pode levar o programa a um estado inv\\xE1lido. Al\\xE9m de que\\npodem haver problemas de concorrencia que s\\xF3 v\\xE3o poder ser arrumados com Mutexes, RwLocks, Semaforos e etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Absurda quantidade de magia:\"), \" Basicamente, mecanismos que s\\xE3o dados pela linguagem mas parte deles \\xE9\\nfeito de maneira magica que n\\xE3o tem como implementar em termos comuns. Poucas vezes isso \\xE9 benefico como\\nalgumas built-in functions do Erlang como o recv e o send que mandam e recebem mensagens de green-threads\\nque s\\xE3o constru\\xE7\\xF5es da VM Beam. S\\xF3 que em outros casos elas introduzem complica\\xE7\\xF5es na leitura e at\\xE9\\ncoisas que podem variar, de infinitas maneiras, como o programa deve ser lido dependendo de um dado. Um grande exemplo disso\\n\\xE9 o \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"extract\"), \" do PHP que introduz uma varia\\xE7\\xE3o nas var\\xE1veis que est\\xE3o no escopo no momento e isso pode variar\\nde infinitas maneiras como de acordo com um argumento de uma fun\\xE7\\xE3o e isso me lembra muito um coment\\xE1rio cheio de \\xF3dio\\nsobre \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pt.stackoverflow.com/a/342860\"\n  }, \"ADVPL\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Classes:\"), \" Pessoas amam hierarquias, classes, design patterns mas eu gosto de ver a programa\\xE7\\xE3o\\nde uma maneira mais simples. Que tal se tudo for um caso de transforma\\xE7\\xE3o entre dados e sim.. as vezes vamos ter\\nque classificar coisas como Functors, Monoids e Monads mas essas s\\xE3o bases bem mais simples e mais \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fortes\"), \" porque ao inv\\xE9s de necessitarmos\\nde Design Patterns que falam o que um peda\\xE7o de c\\xF3digo significa de acordo com um padr\\xE3o, essas classifica\\xE7\\xF5es de programa\\xE7ao funcional,\\nd\\xE3o a habilidade de se utilizar certas fun\\xE7\\xF5es para esse tipo \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"j\\xE1 que ela se encaixa na categoria\"), \".\\nQuando usamos POO com Design Patterns, o significado das coisas \\xE9 mais abrangente e temos menos facilidade de classificar\\nse certo peda\\xE7o de c\\xF3digo contem uma cateracteristica.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Tipagem dinamica:\"), \" Eu tenho problemas de aten\\xE7\\xE3o e mem\\xF3ria, tenho um terr\\xEDvel costume de escrever 1000+ linhas de c\\xF3digo\\nem uma linguagem dinamica e n\\xE3o lembrar qual era o tipo e as limita\\xE7\\xF5es de certa var\\xEDavel que chegou depois de passar por umas\\n200 fun\\xE7\\xF5es e 200 classes.\")), mdx(\"h1\", null, \"Features divertidas para gente testar\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Efeitos algebricos:\"), \" Todas fun\\xE7\\xF5es que mexem com mundo real criam Side-Effects. Isso n\\xE3o \\xE9 algo que eu quero, como eu disse no\\nprimeiro t\\xF3pico, minha mem\\xF3ria \\xE9 curta e eu n\\xE3o curto n\\xE3o saber o que ta acontecendo em certo peda\\xE7o de c\\xF3digo.\\nEnt\\xE3o para evitar isso, podemos explicitamente colocar como que vamos modificar o mundo real por exemplo:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-idris\"\n  }, \"main : { IO } ()\\nmain = \\n      print \\\"Hi\\\"\\n\")), \"Parece meio confuso de primeira vista, mas \\xE9 bem simples o significado, ent\\xE3o vamos demembrar isso linha por linha:\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Definimos o tipo de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"main\"), \" sendo exatamente \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{ IO } ()\"), \". Vamos come\\xE7ar pelo \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \", essa parte significa o tipo Unit que\\ntem exatamente um construtor, o proprio \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \" ou seja \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"() \\xE9 do tipo ()\"), \". Mas u\\xE9 pra que isso serve? Simples: falar que essa fun\\xE7\\xE3o\\nretorna um valor que normalmente n\\xE3o vamos usar j\\xE1 que essa linguagem N\\xC3O TEM NULL. J\\xE1 o \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \" { IO }\"), \" Define que a fun\\xE7\\xE3o ir\\xE1 produzir\\num efeito de Input/Output ou seja, se comunicar com o mundo real (printar, pegar linha do terminal, produzir som, luz, agua ou fogo).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Agora podemos definir o que essa fun\\xE7\\xE3o faz e o que ela \\xE9 faz \\xE9 basicamente printar \\\"Hi\\\" na tela. Print \\xE9 uma fun\\xE7\\xE3o\\nque recebe uma String, produz um efeito de IO e tamb\\xE9m retorna () ou seja \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String -> { IO } ()\"))), \"Sim \\xE9 bem estranho mas serve para bastante coisa. S\\xF3 de olhar uma fun\\xE7\\xE3o podemos dizer o que ela faz quase que exatamente por exemplo \", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-idris\"\n  }, \"registerUser : UserForm -> { Email, SQLStore, Exception } (Maybe User) \\nregisterUser (UserForm name password age) = do \\n  checkPassword password\\n  checkName name \\n  checkAge age  \\n  user <- query (where (\\\"id\\\" :=: 2))\\n  case user of \\n      Just n => do \\n          sendEmail (populate templateEmail user) \\n          pure user \\n      Nothing => Nothing\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Pensando a Linguagem - MKE1"}}},"pageContext":{"slug":"first-post"}},"staticQueryHashes":["63159454"]}